Building a protected web API hosted on Azure and invoking it securely from a Xamarin mobile app (edited March 4, 2020)

This document is meant as a guide to some of the code and configuration settings that need to be implemented for this topic. It is not comprehensive, and settings may vary based on your own requirements. Use ideas presented here as applicable to your context.
1	Deploying a dotnet core 3.0 web api to Azure, protected by authentication and authorization

1.1	Register your App Service app to use Azure Active Directory (AD) login
https://docs.microsoft.com/en-us/azure/app-service/configure-authentication-provider-aad

Assume you have created a dotnet core API, e.g., following this sample:
https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-3.0

1.2	Configure AD app authentication settings
Azure Active Directory (Default Directory) > App registrations > <api app name> > Authentication

Leave all defaults: 
•	Do not allow implicit grant flow, this is less secure.
•	Supported account types: Accounts in this organizational directory only (Default Directory only - Single tenant).

1.3	Creating application roles in the AD app registration
Assume that <app name> represents the user-friendly name of your web API app as registered in Azure AD

If you are using Azure AD Free, under App registrations > <api app name> > Roles and administrators, this message will appear: To create custom roles, your organization needs Azure AD Premium P1 or P2. Start a free trial.

Regardless of this message, it seems like you can still create custom roles without AD Premium by modifying the applications manifest.

Azure Active Directory (Default Directory) > App registrations > <api app name> > Manifest
Edit appRoles to create your custom roles, e.g.,
"appRoles": [
        {
            "allowedMemberTypes": [
                "User"
            ],
            "description": "Physician",
            "displayName": " Physician ",
            "id": <generate a new guid>,
            "isEnabled": true,
            "lang": null,
            "origin": "Application",
            "value": " Physician "
        }
]

This role will now appear when adding a new user to the AD app in the steps below.

If you need to delete a role in the manifest file, you must disable it first by setting isEnabled to false, then saving the manifest, and then deleting the role element in appRoles and saving again.

Default Directory > App registrations > <api app name> > API permissions
https://graph.microsoft.com/User.Read

Default Directory > App registrations > <api app name> > Expose an API
Add a scope: Scope name: "user_impersonation", Who can consent: "Admins and users", State: Enabled
(note: customize this to your requirements)

Scope will be of the format <api app Application ID URI>/user_impersonation

1.4	Add a user with role to AD app

1.4.1	Add a user to AD if the user isn't already defined there
Default Directory > Users > New user

1.4.2	After user in created in #1, 
Default Directory > Enterprise Applications > <app name> > Users and groups > Add user

Here you can add the user defined in #1, with application role defined in appRoles above.

1.5	Configure your code
From your API controller code, you can now control access to resources using an annotation like this: 
[Authorize(Roles = "Physician")]

 
2	Configuring Azure settings for a Xamarin mobile app to invoke the web API
A Xamarin project to modify and test your web api (includes interactive authentication step with AD):
https://github.com/Azure-Samples/active-directory-xamarin-native-v2/tree/master/1-Basic

2.1	Register the mobile app in Azure AD (similar to section 1.1)

Default Directory > App registrations > New registration
Enter display name <mobile app name> and desired account type.

Supported account types: Accounts in this organizational directory only (Default Directory only - Single tenant). Single tenant settings will require specifying the token authority when requesting an access token in the mobile app.

Save the app registration, then edit it under Default Directory > App registrations > <mobile app name > Authentication

Redirect URI: 
Public client/native (mobile & desktop)
Enter the iOS Bundle ID and Redirect URI: e.g.,
BundleID: com.xamarin.oauthnativeflow
Redirect URI: msauth.com.xamarin.oauthnativeflow://auth

Supported account types: Single tenant (modify this to match your requirements


Default Directory > App registrations > <mobile app name > > API permissions
Add permissions to the API AD app configured in section 1.3

Default Directory > App registrations > <mobile app name > > API permissions > Add a permission > My APIs > <api app name>
	Choose delegated permissions, check user_impersonation permission

 
3	Configure the dotnet core API code to reference the Azure defined API
Assume you have created a dotnet core API (same as in section 1.1), e.g., following this sample:
https://docs.microsoft.com/en-us/aspnet/core/web-api/?view=aspnetcore-3.0

3.1	Modify Startup.cs:

public void ConfigureServices(IServiceCollection services)
{
  	…
  	services.AddAuthentication(options => 
    	{
      		options.DefaultAuthenticateScheme = JwtBearerDefaults.AuthenticationScheme;
     		options.DefaultChallengeScheme = JwtBearerDefaults.AuthenticationScheme;
            }).AddJwtBearer(options =>
            {
                options.Authority = "https://login.microsoftonline.com/<AD tenant id>";
                options.Audience = <Application ID URI of API app in AD>;
            });

            services.AddAuthorization();
            services.AddControllers();
}

…

public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
{
	…
      	app.UseAuthentication();
app.UseAuthorization();
	…
}

 
4	Configure the Xamarin mobile app code to invoke the API

App sample to modify can be found here: 
https://github.com/Azure-Samples/active-directory-xamarin-native-v2/tree/master/1-Basic

4.1	Modify App.cs

public class App : Application
{
public static IPublicClientApplication PCA = null;

     	/// <summary>
/// The ClientID is the Application ID found in the portal
/// (https://go.microsoft.com/fwlink/?linkid=2083908). 
/// </summary>
public static string ClientID = <mobile app Application ID>;

    	// scope is defined in section 1.3
    	public static string[] Scopes = 
{ “<api app Application ID URI>/user_impersonation” };

	…

	public App()
{
PCA = PublicClientApplicationBuilder.Create(ClientID)
               		.WithRedirectUri($"msauth.com.xamarin.oauthnativeflow://auth")
               		.WithIosKeychainSecurityGroup("com.microsoft.adalcache")
               		.Build();
            MainPage = new NavigationPage(new UserDetailsClient.MainPage());
      	}


4.2	Modify MainPage.xaml.cs

async void OnSignInSignOut(object sender, EventArgs e)
{
…
try
      	{
      		IAccount firstAccount = accounts.FirstOrDefault();
authResult = await App.PCA.AcquireTokenSilent(App.Scopes, firstAccount)
             			.WithAuthority("https://login.microsoftonline.com//<AD tenant id>")
.ExecuteAsync();
      	}
      	catch (MsalUiRequiredException ex)
      	{
      		try
            		{
authResult = await 
App.PCA.AcquireTokenInteractive(App.Scopes)
.WithAuthority(
"https://login.microsoftonline.com/<AD tenant id>")
.WithParentActivityOrWindow(App.ParentWindow)
.ExecuteAsync();
            }
		…
}

…
// The final step, invoke the API from the Xamarin app!
public async Task<string> GetHttpContentWithTokenAsync(string token)
{
try
            	{
                	// get data from API
               	HttpClient client = new HttpClient();
                	var url = "<api url to get some data>";
                	HttpRequestMessage message = 
new HttpRequestMessage(HttpMethod.Get, url);
message.Headers.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", token);
                	HttpResponseMessage response = await client.SendAsync(message);
                	string responseString = await response.Content.ReadAsStringAsync();

             return responseString;
            }
            catch(Exception ex)
            {
                	await DisplayAlert("API call failed: ", ex.Message, "Dismiss");
                	return ex.ToString();
            }
}

 
4.3	Mobile app interactive login screenshots

On running the app (on device or simulator), the user is redirected to the Microsoft login page. Enter the credentials for the user created in section 1.4.1.

       ¬¬¬¬¬¬¬

Error you may receive if AD tenant settings are not correctly configured:
  

5	Useful links
•	https://stackoverflow.com/questions/53526121/use-a-tenant-specific-endpoint-or-configure-the-application-to-be-multi-ten
•	https://medium.com/@hbhhathorn/authorize-with-jwt-in-asp-net-core-3-0-web-api-542d7a10e8f5
•	https://joonasw.net/view/using-groups-vs-using-app-roles-in-azure-ad-apps
•	https://oauth.net/2/grant-types/implicit/
•	https://docs.microsoft.com/en-us/aspnet/core/security/authorization/limitingidentitybyscheme?view=aspnetcore-3.0

